package bot

import (
	"bot-service/internal/bot/handlers"
	router2 "bot-service/internal/bot/router"
	"bot-service/internal/repository/http/vpn"
	notify_user "bot-service/internal/repository/pgsql/notify-user"
	usrService "bot-service/internal/user"
	"context"
	"fmt"
	"github.com/mr-linch/go-tg"
	"github.com/mr-linch/go-tg/tgb"
	"log"
	"pkg/events"
)

type Service struct {
	bot            *tg.Client
	userService    usrService.ServiceInterface
	vpnRepo        vpn.RepositoryInterface
	notifyUserRepo *notify_user.NotifyUserRepository
}

func NewService(token string, userService usrService.ServiceInterface, vpnRepo vpn.RepositoryInterface, notifyUserRepo *notify_user.NotifyUserRepository) *Service {
	return &Service{
		bot:            tg.New(token),
		userService:    userService,
		vpnRepo:        vpnRepo,
		notifyUserRepo: notifyUserRepo,
	}
}

func (s *Service) Run() error {
	client := s.bot
	router := tgb.NewRouter()

	r := router2.NewRouter(router)
	commandH := handlers.NewCommandHandler(s.userService, s.notifyUserRepo)
	reactionH := handlers.NewReactionHandler(s.bot)
	callbackQueryH := handlers.NewCallbackQueryHandler(s.userService, s.vpnRepo, s.bot)
	messageH := handlers.NewMessageHandler(s.userService, s.vpnRepo)

	r.RegisterCommandHandlers(commandH)
	r.RegisterReactionHandlers(reactionH)
	r.RegisterCallbackQueryHandlers(callbackQueryH)
	r.RegisterMessageHandlers(messageH)

	return tgb.NewPoller(
		router,
		client,
		tgb.WithPollerAllowedUpdates(
			tg.UpdateTypeMessage,
			tg.UpdateTypeMessageReaction,
			tg.UpdateTypeCallbackQuery,
		),
	).Run(context.Background())
}

func (s *Service) NotifySubscriptionRefreshed(event events.SubscriptionRefreshed) (err error) {
	m := tg.HTML.Text(
		tg.HTML.Bold("üí∏ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞!\n"),
		tg.HTML.Bold("üéâ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ ‚Äî —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞–µ—Ç–µ—Å—å —Å –Ω–∞–º–∏!\n"),
		"–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π. üí´\n\n",
		"–ï—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã ‚Äî –º—ã –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º. ü§ù",
	)
	err = s.bot.SendMessage(tg.UserID(event.ChatId), m).ParseMode(tg.HTML).DoVoid(context.Background())

	if err != nil {
		//todo –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
		log.Println(err)
		return err
	}
	return nil
}

func (s *Service) NotifyDeactivatedUser(event events.UserDeactivated) error {
	m := tg.HTML.Text(
		tg.HTML.Bold("üòµ –í—ã –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!"),
		tg.HTML.Blockquote("–ö–∞–∂–µ—Ç—Å—è –≤—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –Ω–∞—Ä—É—à–∏–ª–∏ –Ω–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞! üòî"),
		"–ï—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã ‚Äî —Ç–æ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Ç–µ—Ö—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É",
	)
	err := s.bot.SendMessage(tg.UserID(event.ChatId), m).ParseMode(tg.HTML).DoVoid(context.Background())
	if err != nil {
		//todo –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
		log.Println(err)
		return err
	}
	return nil
}

func (s *Service) NotifyNewMessage(event events.NewMessage) error {
	m := tg.HTML.Text(event.Message)
	users, err := s.notifyUserRepo.All()
	if err != nil {
		return err
	}

	for _, user := range users {
		err = s.bot.SendMessage(tg.UserID(user.ChatId), m).ParseMode(tg.HTML).DoVoid(context.Background())
		if err != nil {
			log.Println(err)
			continue
		}
		log.Println(fmt.Sprintf("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ %d", user.ChatId))
	}

	return nil
}
