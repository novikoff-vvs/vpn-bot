package message

import (
	"bot-service/config"
	"fmt"
	"github.com/mr-linch/go-tg"
)

type message interface {
	Answer(text string) *tg.SendMessageCall
}

type Builder struct {
	sndMsg *tg.SendMessageCall
	cfg    config.PaymentService
}

func NewSendMessageCallBuilder(cfg config.PaymentService) *Builder {
	return &Builder{
		cfg: cfg,
	}
}
func (b Builder) GetFirstMessage(msg message) Builder {
	b.sndMsg = msg.Answer(
		tg.HTML.Text(
			tg.HTML.Bold("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"),
			"",
			"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
			"",
			tg.HTML.Italic(
				"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—è –ø—Ä–æ—Ñ–∏–ª—å, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å "+
					tg.HTML.Link(
						"—É—Å–ª–æ–≤–∏—è–º–∏ –æ—Ñ–µ—Ä—Ç—ã",
						"https://s.novvs.ru/jlF3K",
					))),
	).ParseMode(tg.HTML)
	return b
}
func (b Builder) GetReturnMessage(msg message) Builder {
	b.sndMsg = msg.Answer(
		tg.HTML.Text(
			tg.HTML.Bold("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"),
			"",
			tg.HTML.Bold("/start - –≤—ã–∑–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é"),
			tg.HTML.Bold("/instruction - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞"),
			"",
			tg.HTML.Bold("@in_golang_we_trust - —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞"),
		),
	).ParseMode(tg.HTML)
	return b
}
func (b Builder) GetInstructionMessage(msg message) Builder {
	b.sndMsg = msg.Answer(
		tg.HTML.Text(
			tg.HTML.Link("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "https://s.novvs.ru/rOnXD"),
		),
	).ParseMode(tg.HTML)
	return b
}
func (b Builder) GetSuccessRegister(msg message, vessaLink string) Builder {
	b.sndMsg = msg.Answer(tg.HTML.Text(
		tg.HTML.Bold("üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"),
		"",
		tg.HTML.Text(tg.HTML.Bold("üîê –í–∞–∂–Ω–æ:"), tg.HTML.Blockquote("–≠—Ç–∞ —Å—Å—ã–ª–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –≤–∞—à–∏–º –ª–∏—á–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º.\n\n–ù–∏–∫–æ–º—É –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –µ—ë ‚Äì —ç—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ—Ç–µ—Ä–µ –∞–∫–∫–∞—É–Ω—Ç–∞.")),
		"",
		tg.HTML.Line(tg.HTML.Bold("üîó –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞: "), tg.HTML.Link("SUBSCRIPTION-URL", vessaLink)),
		tg.HTML.Line(tg.HTML.Bold("üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–ª–∏–µ–Ω—Ç–æ–≤:"), tg.HTML.Link("WIKI", "https://s.novvs.ru/rOnXD")),
	)).ParseMode(tg.HTML)
	return b
}
func (b Builder) GetVessaLinkMessage(msg message, vessaLink string) Builder {
	b.sndMsg = msg.Answer(tg.HTML.Line(tg.HTML.Bold("üîó –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞: "), tg.HTML.Link("SUBSCRIPTION-URL", vessaLink)))
	return b
}
func (b Builder) GetCustomMessage(msg *tg.SendMessageCall) Builder {
	b.sndMsg = msg
	return b
}
func (b Builder) AddRequestContactKeyboard() Builder {
	inlineKeyboard := tg.NewReplyKeyboardMarkup(
		[]tg.KeyboardButton{
			tg.NewKeyboardButtonRequestContact("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä"),
		},
	).WithResizeKeyboardMarkup()
	b.sndMsg.ReplyMarkup(inlineKeyboard)
	return b
}
func (b Builder) AddRequestMainMenuKeyboard(uuid string) Builder {

	b.sndMsg.ReplyMarkup(b.GetMainMenuKeyboad(uuid))
	return b
}
func (b Builder) GetPaymentMenuKeyboard(uuid string) tg.InlineKeyboardMarkup {
	return tg.NewInlineKeyboardMarkup(
		[]tg.InlineKeyboardButton{
			{
				Text: "üí∏ –û–ø–ª–∞—Ç–∞",
				WebApp: &tg.WebAppInfo{
					URL: fmt.Sprintf("%sweb/yoomoney/%s", b.cfg.Url, uuid),
				},
			},
		})
}
func (b Builder) RemoveKeyboard() Builder {
	b.sndMsg = b.sndMsg.ReplyMarkup(tg.NewReplyKeyboardRemove())
	return b
}
func (b Builder) Build() *tg.SendMessageCall {
	return b.sndMsg
}
func (b Builder) GetMainMenuKeyboad(uuid string) tg.InlineKeyboardMarkup {
	keyboard := b.GetPaymentMenuKeyboard(uuid).InlineKeyboard
	return tg.NewInlineKeyboardMarkup(
		[]tg.InlineKeyboardButton{
			{
				Text:         "üîó –ú–æ—è —Å—Å—ã–ª–∫–∞",
				CallbackData: "get_link",
			},
		}, keyboard[0])
}
