package message

import (
	"bot-service/config"
	"fmt"
	"github.com/mr-linch/go-tg"
)

type message interface {
	Answer(text string) *tg.SendMessageCall
}

type Builder struct {
	sndMsg *tg.SendMessageCall
	cfg    config.PaymentService
}

func NewSendMessageCallBuilder(cfg config.PaymentService) *Builder {
	return &Builder{
		cfg: cfg,
	}
}
func (b Builder) GetFirstMessage(msg message) Builder {
	b.sndMsg = msg.Answer(
		tg.HTML.Text(
			tg.HTML.Bold("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"),
			"",
			tg.HTML.Text("–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."),
		),
	).ParseMode(tg.HTML)
	return b
}
func (b Builder) GetReturnMessage(msg message) Builder {
	b.sndMsg = msg.Answer(
		tg.HTML.Text(
			tg.HTML.Bold("üëã C –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!"),
		),
	).ParseMode(tg.HTML)
	return b
}
func (b Builder) GetSuccessRegister(msg message, vessaLink string) Builder {
	b.sndMsg = msg.Answer(tg.HTML.Text(
		tg.HTML.Bold("üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"),
		"",
		tg.HTML.Text(tg.HTML.Bold("üîê –í–∞–∂–Ω–æ:"), tg.HTML.Blockquote("–≠—Ç–∞ —Å—Å—ã–ª–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –≤–∞—à–∏–º –ª–∏—á–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º.\n\n–ù–∏–∫–æ–º—É –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –µ—ë ‚Äì —ç—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ—Ç–µ—Ä–µ –∞–∫–∫–∞—É–Ω—Ç–∞.")),
		"",
		tg.HTML.Line(tg.HTML.Bold("üîó –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞: "), tg.HTML.Link("SUBSCRIPTION-URL", vessaLink)),
	)).ParseMode(tg.HTML)
	return b
}
func (b Builder) GetVessaLinkMessage(msg message, vessaLink string) Builder {
	b.sndMsg = msg.Answer(tg.HTML.Line(tg.HTML.Bold("üîó –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞: "), tg.HTML.Link("SUBSCRIPTION-URL", vessaLink)))
	return b
}
func (b Builder) GetCustomMessage(msg *tg.SendMessageCall) Builder {
	b.sndMsg = msg
	return b
}
func (b Builder) AddRequestContactKeyboard() Builder {
	inlineKeyboard := tg.NewReplyKeyboardMarkup(
		[]tg.KeyboardButton{
			tg.NewKeyboardButtonRequestContact("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä"),
		},
	).WithResizeKeyboardMarkup()
	b.sndMsg.ReplyMarkup(inlineKeyboard)
	return b
}
func (b Builder) AddRequestMainMenuKeyboard() Builder {

	b.sndMsg.ReplyMarkup(b.GetMainMenuKeyboad())
	return b
}
func (b Builder) GetPaymentMenuKeyboard(uuid string) *tg.ReplyKeyboardMarkup {
	webAppButton :=
		tg.NewKeyboardButtonWebApp("–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
			tg.WebAppInfo{
				URL: fmt.Sprintf("%sweb/yoomoney/%s", b.cfg.Url, uuid), // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ URL –≤–∞—à–µ–≥–æ WebApp

			})

	replyMarkup := tg.NewReplyKeyboardMarkup(
		[]tg.KeyboardButton{webAppButton},
	).WithResizeKeyboardMarkup()

	return replyMarkup
}
func (b Builder) RemoveKeyboard() Builder {
	b.sndMsg = b.sndMsg.ReplyMarkup(tg.NewReplyKeyboardRemove())
	return b
}
func (b Builder) Build() *tg.SendMessageCall {
	return b.sndMsg
}
func (b Builder) GetMainMenuKeyboad() tg.InlineKeyboardMarkup {
	return tg.NewInlineKeyboardMarkup(
		[]tg.InlineKeyboardButton{
			{
				Text:         "üîó –ú–æ—è —Å—Å—ã–ª–∫–∞",
				CallbackData: "get_link",
			},
			{
				Text:         "üí∏ –û–ø–ª–∞—Ç–∞",
				CallbackData: "payment",
			},
		})

}
