// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/user/by-chat/{chatId}": {
            "get": {
                "description": "Возвращает краткую информацию о пользователе по его Chat ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Получить пользователя по Chat ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ChatID пользователя",
                        "name": "chatId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешный ответ\"  example({\"UUID\": \"550e8400-e29b-41d4-a716-446655440000\", \"Email\": \"user@example.com\", \"ChatId\": 123456789})",
                        "schema": {
                            "$ref": "#/definitions/user.ShortUserResource"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос\"  example({\"error\": \"invalid request\"})",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "404": {
                        "description": "Пользователь не найден\"  example({\"error\": \"user not found\"})",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера\"  example({\"error\": \"internal server error\"})",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/user/create": {
            "post": {
                "description": "Создает нового пользователя с указанными данными и возвращает его идентификатор",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Создать пользователя",
                "parameters": [
                    {
                        "description": "Данные пользователя",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.CreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.CreateResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный формат запроса\"  example({\"error\": \"invalid request\"})",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Неверный формат запроса\"  example({\"error\": \"invalid request\"})",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/user/{uuid}": {
            "get": {
                "description": "Возвращает информацию о пользователе по его UUID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Получить пользователя",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID пользователя",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.GetShortUserResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос\"  example({\"error\": \"invalid request\"})",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "404": {
                        "description": "Пользователь не найден\" \"{\"error\": \"user not found\"}\" example(string)",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера\"  example({\"error\": \"internal server error\"})",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/user/{uuid}/short": {
            "get": {
                "description": "Возвращает укороченную информацию о пользователе по его UUID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Получить укороченную информацию о пользователе",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID пользователя",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.GetShortUserResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный запрос\"  example({\"error\": \"invalid request\"})",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "404": {
                        "description": "Пользователь не найден\" \"{\"error\": \"user not found\"}\" example(string)",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера\"  example({\"error\": \"internal server error\"})",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "user.CreateRequest": {
            "type": "object",
            "properties": {
                "chat_id": {
                    "type": "integer"
                },
                "email": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "user.CreateResponse": {
            "type": "object",
            "properties": {
                "user_id": {
                    "type": "string"
                }
            }
        },
        "user.GetShortUserResponse": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/user.ShortUserResource"
                }
            }
        },
        "user.ShortUserResource": {
            "type": "object",
            "properties": {
                "chat_id": {
                    "type": "integer"
                },
                "email": {
                    "type": "string"
                },
                "uuid": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
